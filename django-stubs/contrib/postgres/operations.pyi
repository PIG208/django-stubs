from typing import Dict, Literal, Tuple

from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations import AddConstraint, AddIndex, RemoveIndex
from django.db.migrations.operations.base import Operation
from django.db.migrations.state import ProjectState
from django.db.models.constraints import BaseConstraint

class CreateExtension(Operation):
    reversible: bool = ...
    name: str = ...
    def __init__(self, name: str) -> None: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def database_backwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def extension_exists(self, schema_editor: BaseDatabaseSchemaEditor, extension: str) -> bool: ...
    def describe(self) -> str: ...
    @property
    def migration_name_fragment(self) -> str: ...

class BloomExtension(CreateExtension):
    def __init__(self) -> None: ...

class BtreeGinExtension(CreateExtension):
    def __init__(self) -> None: ...

class BtreeGistExtension(CreateExtension):
    def __init__(self) -> None: ...

class CITextExtension(CreateExtension):
    def __init__(self) -> None: ...

class CryptoExtension(CreateExtension):
    def __init__(self) -> None: ...

class HStoreExtension(CreateExtension):
    def __init__(self) -> None: ...

class TrigramExtension(CreateExtension):
    def __init__(self) -> None: ...

class UnaccentExtension(CreateExtension):
    def __init__(self) -> None: ...

class NotInTransactionMixin:
    def _ensure_not_in_transaction(self, schema_editor: BaseDatabaseSchemaEditor) -> None: ...

class AddIndexConcurrently(NotInTransactionMixin, AddIndex):
    atomic: Literal[False] = ...
    def describe(self) -> str: ...
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def database_backwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...

class RemoveIndexConcurrently(NotInTransactionMixin, RemoveIndex):
    atomic: Literal[False] = ...
    def describe(self) -> str: ...
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def database_backwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...

class CollationOperation(Operation):
    name: str
    locale: str
    provider: str
    deterministic: bool
    def __init__(self, name: str, locale: str, *, provider: str = ..., deterministic: bool = ...) -> None: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def deconstruct(self) -> Tuple[str, Tuple, Dict[str, str]]: ...
    def create_collation(self, schema_editor: BaseDatabaseSchemaEditor) -> None: ...
    def remove_collation(self, schema_editor: BaseDatabaseSchemaEditor) -> None: ...

class CreateCollation(CollationOperation):
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def database_backwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def describe(self) -> str: ...
    @property
    def migration_name_fragment(self) -> str: ...

class RemoveCollation(CollationOperation):
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def database_backwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def describe(self) -> str: ...
    @property
    def migration_name_fragment(self) -> str: ...

class AddConstraintNotValid(AddConstraint):
    def __init__(self, model_name: str, constraint: BaseConstraint) -> None: ...
    def describe(self) -> str: ...
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    @property
    def migration_name_fragment(self) -> str: ...

class ValidateConstraint(Operation):
    model_name: str
    name: str
    def __init__(self, model_name: str, name: str) -> None: ...
    def describe(self) -> str: ...
    def database_forwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def database_backwards(
        self, app_label: str, schema_editor: BaseDatabaseSchemaEditor, from_state: ProjectState, to_state: ProjectState
    ) -> None: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    @property
    def migration_name_fragment(self) -> str: ...
    def deconstruct(self) -> Tuple[str, Tuple, Dict[str, str]]: ...
