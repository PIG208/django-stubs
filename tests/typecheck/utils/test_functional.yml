-   case: cached_property_class_vs_instance_attributes
    main: |
      from django.utils.functional import cached_property
      from typing import List

      class Foo:
          @cached_property
          def attr(self) -> List[str]: ...

          reveal_type(attr)      # N: Revealed type is "django.utils.functional.cached_property[builtins.list[builtins.str]]"
          reveal_type(attr.name) # N: Revealed type is "builtins.str"

      reveal_type(Foo.attr)      # N: Revealed type is "django.utils.functional.cached_property[builtins.list[builtins.str]]"
      reveal_type(Foo.attr.func) # N: Revealed type is "def (*Any, **Any) -> builtins.list[builtins.str]"

      f = Foo()
      reveal_type(f.attr)        # N: Revealed type is "builtins.list[builtins.str]"
      f.attr.name                # E: "List[str]" has no attribute "name"

-   case: lazy_return_type
    main: |
      from django.utils.functional import lazy, lazystr
      from django.utils.safestring import SafeString

      s = str

      reveal_type(lazy(lambda b: "foo" if b else 0, s, int))   # N: Revealed type is "def (b: Any) -> django.utils.functional.Promise[Tuple[builtins.str, builtins.int], builtins.str]"
      reveal_type(lazy(lambda b: "foo" if b else 0, int, str)) # N: Revealed type is "def (b: Any) -> django.utils.functional.Promise[Tuple[builtins.int, builtins.str], builtins.int]"
      reveal_type(lazy(str, str))                              # N: Revealed type is "Overload(def (object: builtins.object =) -> django.utils.functional.Promise[Tuple[builtins.str], builtins.str], def (object: Union[builtins.bytes, builtins.bytearray, builtins.memoryview, array.array[Any], mmap.mmap, ctypes._CData, pickle.PickleBuffer], encoding: builtins.str =, errors: builtins.str =) -> django.utils.functional.Promise[Tuple[builtins.str], builtins.str])"
      reveal_type(lazy(str, SafeString, str))                  # N: Revealed type is "Overload(def (object: builtins.object =) -> django.utils.functional.Promise[Tuple[django.utils.safestring.SafeString, builtins.str], django.utils.safestring.SafeString], def (object: Union[builtins.bytes, builtins.bytearray, builtins.memoryview, array.array[Any], mmap.mmap, ctypes._CData, pickle.PickleBuffer], encoding: builtins.str =, errors: builtins.str =) -> django.utils.functional.Promise[Tuple[django.utils.safestring.SafeString, builtins.str], django.utils.safestring.SafeString])"
      reveal_type(lazystr("asd"))                              # N: Revealed type is "django.utils.functional.Promise[Tuple[builtins.str], builtins.str]"

-   case: lazy_proxied_callable_is_valid
    main: |
      from django.utils.functional import lazy

      class Foo:
        pass

      class CallableBar:
        def __call__(self) -> int:
          return 1

      lazy("asd", str)                       # E: Argument 1 to "lazy" has incompatible type "str"; expected "Callable[..., Any]"
      lazy(123, int)                         # E: Argument 1 to "lazy" has incompatible type "int"; expected "Callable[..., Any]"
      lazy(Foo(), Foo)                       # E: Argument 1 to "lazy" has incompatible type "Foo"; expected "Callable[..., Any]"
      lazy(lambda: 1, int)
      reveal_type(lazy(Foo, Foo))            # N: Revealed type is "def () -> django.utils.functional.Promise[Tuple[main.Foo], main.Foo]"
      reveal_type(lazy(CallableBar(), int))  # N: Revealed type is "def (*Any, **Any) -> django.utils.functional.Promise[Tuple[builtins.int], builtins.int]"

-   case: lazy_resultclass_is_valid
    main: |
      from django.utils.functional import lazy

      invalid_lazy = lazy(lambda b: "foo" if b else 0, "asd", int)  # E: Argument 2 is invalid as a resultclass
      reveal_type(invalid_lazy)                                     # N: Revealed type is "def (b: Any) -> django.utils.functional.Promise[Any, Any]"

-   case: user_defined_promise
    main: |
      from typing import Tuple, Union
      from django.utils.functional import Promise, lazy

      a: Promise = lazy(str, str)()
      reveal_type(a)                                   # N: Revealed type is "django.utils.functional.Promise[Any, Any]"
      a: Promise[Tuple[str]] = lazy(str, str)()        # E: "Promise" expects 2 type arguments, but 1 given
      foo: Promise[Tuple[str], str] = lazy(str, str)()
      bar: Promise[Tuple[str], str] = lazy(int, int)   # E: Incompatible types in assignment (expression has type "Type[Promise[Any, Any]]", variable has type "Promise[Tuple[str], str]")

      def f() -> Union[str, int]:
        ...

      def g(obj: Promise[Tuple[str], str]) -> None:
        ...

      baz = lazy(f, str, int)()


      g(baz)  # E: Argument 1 to "g" has incompatible type "Promise[Tuple[str, int], str]"; expected "Promise[Tuple[str], str]"
      g(foo)

-   case: access_promise_attributes
    main:  |
      from typing import Any
      from django.utils.functional import Promise, lazy, lazystr

      obj = lazystr("lazy {val}")
      reveal_type(obj.format("asd"))  # N: Revealed type is "builtins.str"
      reveal_type(obj.__add__("b"))   # N: Revealed type is "builtins.str"
      reveal_type(obj.__mod__)        # N: Revealed type is "def (Union[django.utils.functional.Promise[Tuple[builtins.str], builtins.str], builtins.str]) -> builtins.str"
      reveal_type(obj.__lt__)         # N: Revealed type is "def (Union[django.utils.functional.Promise[Tuple[builtins.str], builtins.str], builtins.str]) -> builtins.bool"
      reveal_type(obj + "bar")        # N: Revealed type is "builtins.str"
      reveal_type(obj < "bar")        # N: Revealed type is "builtins.bool"
      reveal_type(obj % "bar")        # N: Revealed type is "builtins.str"
      obj.foo                         # E: 'django.utils.functional.Promise[Tuple[builtins.str], builtins.str]' object has no attribute 'foo'

      lazyany_a: Promise[Any, Any] = lazy(str, str)()
      lazyany_a.foo
      lazyany_b: Promise = lazy(str, str)()
      lazyany_b.foo

-   case: access_promise_attributes_with_typevar
    main:  |
      from typing import Any, Tuple, TypeVar
      from django.utils.functional import Promise, lazystr

      T = TypeVar("T", bound=Tuple)

      def foo(promise: Promise[T, Any]) -> Promise[T, Any]:
        return promise

      val = foo(lazystr("asd"))
      reveal_type(val)         # N: Revealed type is "django.utils.functional.Promise[Tuple[builtins.str], Any]"
      reveal_type(val.format)  # N: Revealed type is "def (self: builtins.str, *args: builtins.object, **kwargs: builtins.object) -> builtins.str"
